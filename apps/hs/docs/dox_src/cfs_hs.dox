/**
    \page cfshsfrontpage CFS Health and Safety (HS) Documentation
    <UL>
        <LI> \subpage cfshsintro
        <LI> \subpage cfshsovr
        <LI> \subpage cfshsopr
        <LI> \subpage cfshscmdspg
        <LI> \subpage cfshstlmpg
        <LI> \subpage cfshseventspg
        <LI> \subpage cfshsdg
        <LI> \subpage cfshscfgpg
        <LI> \subpage cfshstbl
        <LI> \subpage cfshscons
        <LI> \subpage cfshsfaqs
    </UL>
**/

/**
 * \page cfshseventspg CFS Health and Safety Events
 *
 * \ref cfshsevents
 */

/**
 * \page cfshscfgpg CFS Health and Safety Configuration
 *
 * \ref cfshsmissioncfg
 *
 * \ref cfshsplatformcfg
 */

/**
 * \page cfshscmdspg CFS Health and Safety Commands
 *
 * \ref cfshscmdmid
 *
 * \ref cfshscmdstructs
 *
 * \ref cfshscmdcodes
 */

/**
 * \page cfshstlmpg CFS Health and Safety Telemetry
 *
 * \ref cfshstlmmid
 *
 * \ref cfshstlm
 */

/**
  \page cfshsintro CFS Health and Safety Introduction

  <H2> Scope </H2>

  This document provides a complete specification for the commands and telemetry associated
  with the Health and Safety (HS) application software.  The document is intended primarily
  for users of the software (operations personnel, test engineers, and maintenance personnel).
  The last section of the document, the deployment guide section, is intended for mission
  developers when deploying and configuring the HS application software for a mission
  flight software build environment.

  \ref cfshsversion

  <H2> Acronyms </H2>

  <TABLE BORDER="1" CELLPADDING="2" WIDTH="60%">
  <TR><TD WIDTH="20%"> <B>Acronym</B> </TD> <TD WIDTH="40%"> <B>Description</B>                       </TD>
  <TR><TD WIDTH="20%"> API     </TD> <TD WIDTH="40%"> Application Programming Interface               </TD>
  <TR><TD WIDTH="20%"> ATP     </TD> <TD WIDTH="40%"> Absolute Time Processor                         </TD>
  <TR><TD WIDTH="20%"> ATS     </TD> <TD WIDTH="40%"> Absolute Time tagged command Sequence           </TD>
  <TR><TD WIDTH="20%"> CCSDS   </TD> <TD WIDTH="40%"> Consultative Committee for Space Data Systems   </TD>
  <TR><TD WIDTH="20%"> C&DH    </TD> <TD WIDTH="40%"> Command and Data Handling                       </TD>
  <TR><TD WIDTH="20%"> CFE     </TD> <TD WIDTH="40%"> Core Flight Executive                           </TD>
  <TR><TD WIDTH="20%"> CFS     </TD> <TD WIDTH="40%"> Core Flight System                              </TD>
  <TR><TD WIDTH="20%"> CI      </TD> <TD WIDTH="40%"> Command Ingest                                  </TD>
  <TR><TD WIDTH="20%"> Cmd     </TD> <TD WIDTH="40%"> Command                                         </TD>
  <TR><TD WIDTH="20%"> CPU     </TD> <TD WIDTH="40%"> Central Processing Unit                         </TD>
  <TR><TD WIDTH="20%"> EDAC    </TD> <TD WIDTH="40%"> Error Detection and Correction                  </TD>
  <TR><TD WIDTH="20%"> FDS     </TD> <TD WIDTH="40%"> Flight Data System                              </TD>
  <TR><TD WIDTH="20%"> FM      </TD> <TD WIDTH="40%"> File Manager                                    </TD>
  <TR><TD WIDTH="20%"> FSW     </TD> <TD WIDTH="40%"> Flight Software                                 </TD>
  <TR><TD WIDTH="20%"> GN&C    </TD> <TD WIDTH="40%"> Guidance Navigation & Control                   </TD>
  <TR><TD WIDTH="20%"> GSFC    </TD> <TD WIDTH="40%"> Goddard Space Flight Center                     </TD>
  <TR><TD WIDTH="20%"> HK      </TD> <TD WIDTH="40%"> Housekeeping                                    </TD>
  <TR><TD WIDTH="20%"> HS      </TD> <TD WIDTH="40%"> Health and Safety                               </TD>
  <TR><TD WIDTH="20%"> HW, H/W </TD> <TD WIDTH="40%"> Hardware                                        </TD>
  <TR><TD WIDTH="20%"> ICD     </TD> <TD WIDTH="40%"> Interface Control Document                      </TD>
  <TR><TD WIDTH="20%"> ISR     </TD> <TD WIDTH="40%"> Interrupt Service Routine                       </TD>
  <TR><TD WIDTH="20%"> OS      </TD> <TD WIDTH="40%"> Operating System                                </TD>
  <TR><TD WIDTH="20%"> OSAL    </TD> <TD WIDTH="40%"> Operating System Abstraction Layer              </TD>
  <TR><TD WIDTH="20%"> Pkts    </TD> <TD WIDTH="40%"> Packets                                         </TD>
  <TR><TD WIDTH="20%"> RAM     </TD> <TD WIDTH="40%"> Random-Access Memory                            </TD>
  <TR><TD WIDTH="20%"> RTOS    </TD> <TD WIDTH="40%"> Real Time Operating System                      </TD>
  <TR><TD WIDTH="20%"> RTP     </TD> <TD WIDTH="40%"> Relative Time Processor                         </TD>
  <TR><TD WIDTH="20%"> RTS     </TD> <TD WIDTH="40%"> Relative Time tagged command Sequence           </TD>
  <TR><TD WIDTH="20%"> SB      </TD> <TD WIDTH="40%"> Software Bus Service                            </TD>
  <TR><TD WIDTH="20%"> SBC     </TD> <TD WIDTH="40%"> Single Board Computer                           </TD>
  <TR><TD WIDTH="20%"> SC      </TD> <TD WIDTH="40%"> Stored Commands task                            </TD>
  <TR><TD WIDTH="20%"> SW, S/W </TD> <TD WIDTH="40%"> Software                                        </TD>
  <TR><TD WIDTH="20%"> TBD     </TD> <TD WIDTH="40%"> To Be Determined                                </TD>
  <TR><TD WIDTH="20%"> TBL     </TD> <TD WIDTH="40%"> Table                                           </TD>
  <TR><TD WIDTH="20%"> TDM     </TD> <TD WIDTH="40%"> Time Data Multiplex                             </TD>
  <TR><TD WIDTH="20%"> TLM     </TD> <TD WIDTH="40%"> Telemetry                                       </TD>
  <TR><TD WIDTH="20%"> UTC     </TD> <TD WIDTH="40%"> Universal time code                             </TD>
  </TABLE>
**/

/**
    \page cfshsovr CFS Health and Safety Overview

    The CFS Health and Safety (HS) application provides functionality for Application Monitoring,
    Event Monitoring, Hardware Watchdog Servicing, Execution Counter Reporting (optional), and CPU
    Aliveness Indication (via UART).

    Application Monitoring, Event Monitoring, and Execution Counter Reporting are configurable by
    table while the application is running. Application Monitoring, Event Monitoring and CPU
    Aliveness Indication can be disabled or enabled by ground command, and can be configured to
    be disabled or enabled (if a table is provided) on startup.

    \section HS Design Overview

    The Health and Safety application nominally runs once per second. First, it makes updates based
    on any table loads during the previous second. Next, it performs Application Monitoring, if
    enabled, in the order listed in the table, taking actions if necessary. Next, the Aliveness
    Indicator (to the UART) is output if enabled and it is time to do so. After that, all events
    received during the previous cycle are checked, in order, if enabled, against the Event Monitor
    Table (in the order listed in the table) and actions are taken if necessary. Next, all commands
    and housekeeping requests received during the previous cycle are processed. Finally, the hardware
    watchdog is serviced after which the HS application waits until the next cycle to begin the
    process again.
**/

/**
  \page cfshsopr CFS Health and Safety Operation

  The Health and Safety Application consists of several mostly independent components. The following
  describes these components and their potential uses.

  <H2> Application Monitor </H2>

  The HS Application Application Monitor (AppMon), is used to take action when a table defined application
  fails to increment its Execution Counter for the table defined number of cycles. The HS Application will
  not start monitoring applications until system startup has been completed (#CFE_ES_WaitForStartupSync
  returns, whether because the system is finished starting up, or because it timed out).

  AppMon checks the execution count each cycle for each application defined in the Application Monitor Table.
  If the current value of the execution counter matches the value of the counter during the previous cycle
  then the "missing" count is decremented, otherwise the "missing" count is reset to the table defined
  threshold count value. If the "missing" count reaches zero, then the table defined action is taken.

  Once the "missing" count reaches zero and the action is taken, that table entry is disabled until
  Application Monitoring (as a whole) is commanded to be enabled (it does not matter if Application
  Monitoring is disabled first), or a new Application Monitor Table is loaded.

  An application may appear in the Application Monitor Table more than once, allowing it to have multiple
  actions. This might be used to attempt to restart an application, and failing that (having a larger
  timeout threshold) perform a processor reset. Another use might be to take another action (perhaps a
  Message Action causing a Power-On Reset) if the HS Max Processor Reset limit has been reached. This
  ability also might be used for sending multiple Message Actions.

  If an application is not currently running on the system, then it is considered to not be incrementing
  its counter (which does not exist). The HS Application itself does not know whether the Application is
  legitimately missing, or was incorrectly specified in the table, so it assumes that it is a real, missing
  application. If Processor Reset Limiting is not set properly, such an application missing at startup could
  even lead to an infinite reset loop.

  <H2> Event Monitor </H2>

  The HS Application Event Monitor (EventMon) is used to take action when a table defined application
  generates an event with a table defined Event ID number. The HS Application will not start monitoring
  events until system startup has been completed (#CFE_ES_WaitForStartupSync returns, whether because
  the system is finished starting up, or because it timed out). Note that EventMon does not monitor the
  contents of events, only the generation of them (by Event ID number).

  EventMon can only monitor events that have not been filtered by Event Services (EVS). If EVS filters
  out an event, it will not be sent out, and so HS will never receive it.

  EventMon checks all generated events once each cycle, checking the events generated during the previous
  cycle. For each event received, the Event ID number is checked against the each Event ID number in the
  Event Monitor Table; if the Event ID number matches, then the Application Name is compared, and if it
  too matches, then the event monitor takes the table specified action. If the Event Monitor Table contains
  multiple instances of an Application Name/Event ID number pair, then multiple actions will be taken in
  the order listed in the table. If one of the multiple actions is a Processor Reset action, and the HS
  Application has not reached its maximum number of Processor Reset attempts (and so a reset occurs),
  then no further actions would be taken.

  <H2> Message Actions </H2>

  Message Actions allow the HS Application to send a message on the software bus by an action type from
  the Application Monitor or Event Monitor. While this would typically be used to send a command, it is
  also possible to send a telemetry message. Each Message Action only sends a single message, but
  Application Monitoring or Event Monitoring tables can be set up to perform multiple actions for the
  same application or event if multiple messages are needed. Each Message Action has its own action type.

  The Message Actions table can specify a cooldown for each message it can send; the cooldown determines
  how many cycles must be waited before the message can be sent again. For example, if a message has a
  cooldown value of 4, and is sent due to a monitored event, then if the same event is received again in
  the next three cycles, no message would be sent; if it is received again on the 4th cycle or later,
  the message will be sent again. A cooldown value of 1 means the message can be sent once per cycle. A
  cooldown value of 0 means the message can be sent multiple times per cycle.

  <H2> Processor Reset Limiting </H2>

  The HS Application limits the number of Processor Resets that it will perform to prevent the system
  from getting into an infinite reset loop. HS keeps track of how many processor resets it has performed
  in a Critical Data Store; if this CDS is corrupt or does not exist (due to design or Power-On reset)
  then it assumes 0 resets have been performed by HS. Because Executive Services (ES) will perform a
  Power-On reset after a defined threshold of Processor Resets have occured, the threshold value for HS
  Processor Resets should be set to less than this, if the developer wants to use HS Processor Reset
  Limiting (conversely, it should be set higher if the developer does not want to use limiting). A Max
  HS Processor Reset value of 0 means that HS will never attempt to perform a processor reset.

  If there is the desire to bypass Reset Limiting for some but not all situations (especially if a
  Power-On reset might be necessary), then Message Actions can be used to command a reset via ES. HS
  will not consider this an HS caused Processor Reset and will not increment its counter for this.

  <H2> Watchdog Management </H2>

  The HS Application enables and initializes the timeout value of the hardware watchdog once at startup.
  Note that this is the only time that the HS Application will set the watchdog timeout via the
  #CFE_PSP_WatchdogSet() function.

  The HS Application nominally services the hardware watchdog once every cycle using
  #CFE_PSP_WatchdogService(). The HS Application will only disable this periodic servicing of the
  watchdog when it attempts to perform a processor reset (in response to Event or Application monitoring)
  as a contingency against #CFE_ES_ResetCFE() failing; nominally the processor reset will re-initialize
  HS which will once again initialize and service the watchdog.

  If the developer wishes to occassionally set a longer watchdog timeout in situations where HS may be
  prevented from running by a higher priority task for extended periods of time, this may be accomplished
  using the #CFE_PSP_WatchdogSet() API with a larger timeout value. As the HS Application only sets the
  timeout value at startup, if it does run during that time the watchdog will be reset to larger value.
  After setting the new timeout value, the developer should service using the watchdog using
  #CFE_PSP_WatchdogService() to ensure that the new timeout value is being used. Prior to setting the new
  timeout value, the developer should get the current timeout value using #CFE_PSP_WatchdogGet(), and
  restore this value after the larger value is no longer needed.

  <H2> Execution Counter Reporting </H2>

  The HS Application provides the ability to report execution counter data in telemetry. Execution
  counter data can be reported for both applications and child tasks.

  If the application or task specified in the a table entry fails to be found (either due to absence or
  improper naming), or if no application or task is specified, the telemetry associated with with that
  entry will read 0xFFFFFFFF. If no table is present, then all associated telemetry will read 0xFFFFFFFF.

  The Execution Counter Telemetry reporting functionality is optional, and is not included in the build
  process if no counters will be reported (the Execution Counter Table to support this functionality would
  also not exist in such a case).

  <H2> Aliveness Indication </H2>

  The Aliveness indicator will, if enabled (either by command or by configuration parameter), output the
  predefined configuration parameter string using #OS_printf at the configuration parameter determined rate.

  <H2> CPU Utilization Monitoring and Hogging Detection </H2>

  The HS Application creates an Idle Child Task at a low priority, that is used to determine the portion
  of CPU utilization not being used by other applications. The Idle Child Task continually increments a
  counter while running; and this counter is recorded at 1 Hz by a TIME 1 Hz callback function. When the
  HS application runs each cycle, it will compute the non-Idle Child Task utilization that occurred during
  the previous cycle and report the average utilization, peak utilization, and determine if the processor
  is being hogged. The frequency at which the count is recorded and at which the HS application computes
  utilization can be configured to be other than 1 Hz or 1 cycle if necessary.

  If the utilization is in excess of a configurable amount for a configurable period of time, then the CPU
  Hogging event message will be sent. This message can be used to by HS Event Monitoring to perform whatever
  action the user desires.

  The Idle Child Task requires calibration to perform properly, and provides the ability to perform the
  necessary calibrations using the software itself. See the deployment portion of this guide for more
  information on calibration.
**/

/**
  \page cfshsdg CFS Health and Safety Deployment Guide

  The Health and Safety application cycle may be any length of time, but typically 1 Hz is chosen as the
  desired rate. The cycle time is important when considering all of the configuration parameters and directly
  affects the values that should be chosen for Application Monitoring. The cycle is initiated by pending
  on a Software Bus pipe for a packet with the #HS_WAKEUP_MID Message ID. This pend may be forever, or may
  be set to a specific timeout value using the #HS_WAKEUP_TIMEOUT configuration parameter to make sure HS
  runs even if no message is received. This configuration parameter can even be used to make HS run
  independently if no wakeup message is expected. Additionally, there is a configuration parameter called
  #HS_POST_PROCESSING_DELAY which will cause a task delay for the configured number of milliseconds after
  the HS processing cycle is over, before it pends on the Software Bus for the next packet. Just as a general
  note, configuration of how HS should run should be carefully considered in the context of the system it
  will be run on and the desires of the project. As some examples:

  On a system with a fairly reliable schedule, the easiest method for setting up HS to run could be to add
  the #HS_WAKEUP_MID to the Scheduler (SCH) Application to be sent once per second, setting
  #HS_POST_PROCESSING_DELAY to 0 and #HS_WAKEUP_TIMEOUT to #CFE_SB_PEND_FOREVER (or to greater than a second
  if assurance that HS runs is desired).

  On a subsystem where scheduling may be reset by an outside source or delayed by a resource intensive task,
  this design may not be as desirable as it could interfere with Application Monitoring. In such a case,
  either an alternate, more reliable, source could be used for 1 Hz delivery, or #HS_POST_PROCESSING_DELAY
  can be used to assure that the cycle time is not too short in cases of a reset.

  If more independence of HS is desired, #HS_POST_PROCESSING_DELAY could be used for scheduling with
  #HS_WAKEUP_TIMEOUT set to #CFE_SB_POLL (though this method would not have high timing accuracy).

  Each of the Health and Safety Application tables is sized by a configuration parameter. It is probably
  a good idea to leave a reasonable number of spare entries. Remember that applications can appear in the
  Application Monitor Table more than once, and events can appear in the Event Monitor Table more than once
  as well, making complex actions possible (provided there are enough table entries to use).

  Special consideration needs to be given to several configuration parameters:
  <UL>
      <LI> #HS_EVENT_PIPE_DEPTH - This parameter determines how many events can be stored for Event
           Monitoring each cycle, and so should be deep enough to capture the maximum number of expected events.
      <LI> #HS_STARTUP_SYNC_TIMEOUT - This parameter needs to be set so that HS will start after all
           applications being monitored.
      <LI> #HS_MAX_RESTART_ACTIONS - This parameter needs to be set with consideration to
           #CFE_PLATFORM_ES_MAX_PROCESSOR_RESETS as if Executive Services performs a Power-On Reset, the count
           of resets stored by HS will be reset. (This may be desirable if HS reset limiting is not desired)
    </UL>

  <H3>Health and Safety CPU Utilization Monitoring</H3>

  System monitoring is inherently platform specific, and so the capability of the Health and Safety application
  to monitor system CPU utilization is now dependent on a module in the CFE Platform Support Package (PSP).
  This PSP module presents the system monitor variables as virtualized 24-bit ADC-style inputs, where 0 represents
  the minimum value, and 0xFFFFFF represents the maximum value for any given channel.  All raw values should be
  normalized into this 24-bit range by the PSP, where it is further processed by HS based on the local filtering
  parameters.

  The following configuration items control the behavior of system monitoring:

  <UL>
    <LI> #HS_SYSTEM_MONITOR_DEVICE
    <LI> #HS_SYSTEM_MONITOR_SUBSYSTEM_NAME
    <LI> #HS_SYSTEM_MONITOR_SUBCHANNEL_NAME
    <LI> #HS_CPU_UTILIZATION_CYCLES_PER_INTERVAL
    <LI> #HS_CPU_UTILIZATION_MAX
    <LI> #HS_UTIL_PER_INTERVAL_HOGGING
    <LI> #HS_UTIL_HOGGING_TIMEOUT
    <LI> #HS_UTIL_PEAK_NUM_INTERVAL
    <LI> #HS_UTIL_AVERAGE_NUM_INTERVAL
  </UL>

  The #HS_SYSTEM_MONITOR_DEVICE parameter specifies the name of a PSP device that performs system monitoring,
  and the #HS_SYSTEM_MONITOR_SUBSYSTEM_NAME and #HS_SYSTEM_MONITOR_SUBCHANNEL_NAME specify (optional) subsystem
  and subchannel names, respectively.  Upon reading this value, the PSP is expected to return a normalized 24-bit
  code value where 0 represents no CPU load, and (2^24-1) represents maximum CPU load, over the last
  measurement period.

  A history of this data is maintained internally within HS, and it is reported in the telemetry via the
  "UtilCpuAvg" and "UtilCpuPeak" fields, which contain the average and peak values for CPU utilization over
  the last #HS_UTIL_AVERAGE_NUM_INTERVAL and #HS_UTIL_PEAK_NUM_INTERVAL recording periods, respectively.
  The reported telemetry is adjusted to a range of [0..#HS_CPU_UTILIZATION_MAX], where the default value
  of 10000 correlates to 0.01% steps.

  The threshold for CPU "hogging", where the system has a very high CPU utilization, is controlled by the
  #HS_UTIL_PER_INTERVAL_HOGGING threshold.  When CPU utilization is above this level, a separate
  event is triggered indicating that system intervention may be necessary to rectify the situation.

**/

/**
  \page cfshstbl CFS Health and Safety Table Definitions

  The CFS Health and Safety application utilizes three (if not using Execution Counter Reporting)
  or four tables.

  <H2> Application Monitor Table (AMT) </H2>

  The AMT is the configuration table for the HS Application Monitor, defining when to take action
  and what action to take.

  The AMT consists of an array of records numbering #HS_MAX_MONITORED_APPS defined by #HS_AMTEntry_t.

  <UL>
    <LI> The Application Name should be the name of the application as the system knows it: up
         to #OS_MAX_API_NAME in length.
    <LI> The Null Terminator must be 0: this exists as quick method making sure that the strings
         in the table are no longer than the maximum length.
    <LI> The Cycle Count is the number of HS cycles that the named application's execution counter
         must not be incremented before the defined action is taken.
    <LI> The Action Type is the action to take:
    <UL>
        <LI> #HS_AMT_ACT_NOACT for a disabled entry.
        <LI> #HS_AMT_ACT_PROC_RESET for an entry that causes a processor reset.
        <LI> #HS_AMT_ACT_APP_RESTART for an entry that restarts the named application.
        <LI> #HS_AMT_ACT_EVENT for an entry that only generates an event message.
        <LI> HS_AMT_ACT_MSG(num) for an entry that generates a message action, where 'num' is
             the index into the Message Actions Table.
    </UL>
  </UL>

  While there is no valid AMT loaded, the HS Application Monitor will be disabled (it will be disabled
  again if an attempt to enable it is made).

  <H2> Event Monitor Table (EMT) </H2>

  The EMT is the configuration table for the HS Event Monitor, defining when to take action and what action to take.

  The EMT consists of an array of records numbering #HS_MAX_MONITORED_EVENTS defined by #HS_EMTEntry_t.

  <UL>
    <LI> The Application Name should be the name of the application as the system knows it: up
         to #OS_MAX_API_NAME in length.
    <LI> The Null Terminator must be 0: this exists as quick method making sure that the strings in
         the table are no longer than the maximum length.
    <LI> The Event ID is the number of the event being monitored for.
    <LI> The Action Type is the action to take:
    <UL>
        <LI> #HS_EMT_ACT_NOACT for a disabled entry.
        <LI> #HS_EMT_ACT_PROC_RESET for an entry that causes a processor reset.
        <LI> #HS_EMT_ACT_APP_RESTART for an entry that restarts the named application.
        <LI> #HS_EMT_ACT_APP_DELETE for an entry that deletes the named application.
        <LI> HS_EMT_ACT_MSG(num) for an entry that generates a message action, where 'num' is the
             index into the Message Actions Table.
    </UL>
  </UL>

  While there is no valid EMT loaded, the HS Event Monitor will be disabled (it will be disabled
  again if an attempt to enable it is made).

  <H2> Message Actions Table (MAT) </H2>

  The MAT stores the messages sent by the HS Application Monitor or HS Event Monitor Message Action Type.

  The MAT consists of an array of records numbering #HS_MAX_MSG_ACT_TYPES defined by #HS_MATEntry_t.

  <UL>
    <LI> The Cooldown value determines how many cycles must be waited before a message can be sent
         again; a value of 0 means the message can be sent multiple times in one cycle, a value of
         1 means the message can only be sent once per cycle, a value of 2 means the message could
         only be sent every other cycle, etc.
    <LI> The Message is an array of bytes of length #HS_MAX_MSG_ACT_SIZE which contains the message
         to be sent. Keep byte-swapping issues in mind when populating this field.
    <LI> The Enable State determines whether the message action in that record can be sent:
    <UL>
        <LI> #HS_MAT_STATE_DISABLED for a disabled entry.
        <LI> #HS_MAT_STATE_ENABLED for an enabled entry which will generate an event when sent.
        <LI> #HS_MAT_STATE_NOEVENT for an enabled entry which will not generate an event when sent.
    </UL>
  </UL>

  While there is no valid MAT loaded, no Message Actions will be sent.

  <H2> Execution Counter Table (XCT) </H2>

  The EMT is the configuration table for the HS Execution Counter reporting, defining which counters
  are reported in telemetry.

  The XCT consists of an array of records numbering #HS_MAX_EXEC_CNT_SLOTS defined by #HS_XCTEntry_t.

  <UL>
    <LI> The Resource Name should be the name of the application or child task as the system knows
         it: up to #OS_MAX_API_NAME in length.
    <LI> The Null Terminator must be 0: this exists as quick method making sure that the strings
         in the table are no longer than the maximum length.
    <LI> The Resource Type is the type of resource being monitored:
    <UL>
      <LI> #HS_XCT_TYPE_NOTYPE for a disabled entry.
      <LI> #HS_XCT_TYPE_APP_MAIN for an Application Main Task.
      <LI> #HS_XCT_TYPE_APP_CHILD for a Child Task.
      <LI> #HS_XCT_TYPE_ISR for an ISR counter.
      <LI> #HS_XCT_TYPE_DEVICE for a Device Driver counter.
    </UL>
  </UL>

  While there is no valid XCT loaded, all Execution Counters in telemetry will be reported
  as invalid (0xFFFFFFFF).
**/

/**
  \page cfshscons CFS Health and Safety Operational Constraints

  The Health and Safety application is very robust and will only fail to run or stop running if
  certain cFE failures occur. At start-up, this includes registering tables with Table Services,
  subscribing to Event Services, and creating pipes and subscribing with Software Bus. While running,
  this only occurs of if the Software Bus Receive API generates an error.

  While the typical operational scenario for changing the Application Monitor Table or Event Monitor
  Table would probably involve disabling the respective Monitoring type, the software does support
  loading while running (although this will reset the Application Monitoring even if the same or a
  similar table is loaded).
**/

/**
  \page cfshsfaqs CFS Health and Safety Frequently Asked Questions

  <B> (Q)
     Why is there no option to start an RTS in response to Application Monitor failure or Event
     Monitor detection?
  </B> <BR> <BR> <I>
     RTSes may still be started using Message Actions, provided your system is using the Stored
     Command (SC) Application. Message Actions were added in favor of retaining RTS capabilities
     as they provide a more generic solution (such as systems without SC or with an alternative type of SC).
  </I>

  <B> (Q)
     What if no events need to be monitored?
  </B> <BR> <BR> <I>
     The Event Monitor Table must exist (and so must be of non-zero length), but Event Monitoring can
     be disabled by default. Event Monitoring may always be useful at some point in the future life
     of a mission, so be sure that enough spare entries are available (even if all entries are spares).
  </I>

  <B> (Q)
     What if no Message Actions are needed?
  </B> <BR> <BR> <I>
     The Message Actions Table must exist (and so must be of non-zero length), but all entries in it
     can be disabled. Message Actions may always be useful at some point in the future life of a mission,
     so be sure that enough spare entries are available (even if all entries are spares).
  </I>
**/
